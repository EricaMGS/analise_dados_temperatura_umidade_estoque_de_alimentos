import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import io
import os # Importar para manipula√ß√£o de arquivos/caminhos

# --------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE CARREGAMENTO DE DADOS (Padr√£o para uso local)
# Use 'dados_pi.txt' se estiver no mesmo diret√≥rio.
FILE_PATH = 'dados_pi.txt'
# --------------------------------------------------------------------------

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Dados de Termo-higr√¥metro",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo do aplicativo
st.title("Projeto Integrador IV: Monitoramento de Estoque com IoT e Machine Learning")

st.markdown("""
Este aplicativo demonstra como utilizar dados de um termo-higr√¥metro para an√°lise de estoque,
aplicando t√©cnicas de machine learning para auxiliar na tomada de decis√µes.
""")

# --- Se√ß√£o de Carregamento e Tratamento dos Dados ---
st.header("1. Carregamento e Tratamento dos Dados")

@st.cache_data
def load_and_preprocess_data(file_path):
    # Tenta ler o arquivo diretamente do disco
    try:
        # Abre o arquivo com a codifica√ß√£o correta
        with open(file_path, 'r', encoding='utf-8') as f:
            file_content = f.read()
            
        # 1. PR√â-PROCESSAMENTO: Corre√ß√£o de anos inv√°lidos e limpeza de linhas.
        # Corre√ß√£o do ano '2925' para '2025' que causa o erro 'Out of bounds nanosecond timestamp'
        file_content = file_content.replace('2925', '2025')
        
        # Limpar linhas vazias e remover espa√ßos/tabula√ß√µes extras no in√≠cio e fim de CADA linha.
        lines = file_content.split('\n')
        cleaned_lines = [line.strip() for line in lines if line.strip()]
        file_content_cleaned = '\n'.join(cleaned_lines)
        
        # Usar StringIO para ler o conte√∫do da string como se fosse um arquivo
        data = io.StringIO(file_content_cleaned)

        # 2. Leitura com Pandas (usando engine='python' para toler√¢ncia)
        df = pd.read_csv(
            data, 
            sep='\t', 
            skiprows=1, # Ignora a linha MAC ap√≥s a limpeza (que deve ser a primeira linha limpa)
            header=0,
            engine='python', # For√ßa o parser Python (mais tolerante a irregularidades)
            skipinitialspace=True # Ignora espa√ßos extras ap√≥s o delimitador
        )
        
        # Renomear colunas para f√°cil acesso, removendo caracteres especiais:
        df.columns = ['data', 'temperatura', 'umidade', 'ponto_orvalho', 'vpd']
        
        # 3. Limpeza e Convers√£o
        df = df.dropna(how='all') 
        
        # O formato da data √© M√™s/Dia/Ano Hora:Minuto
        df['data'] = pd.to_datetime(df['data'], format='%m/%d/%Y %H:%M')
        
        # Converter colunas num√©ricas, substituindo v√≠rgula por ponto
        for col in ['temperatura', 'umidade', 'ponto_orvalho', 'vpd']:
            if df[col].dtype == 'object':
                 df[col] = df[col].astype(str).str.replace(',', '.').astype(float)

        return df

    except FileNotFoundError:
        st.error(f"Erro: O arquivo '{file_path}' n√£o foi encontrado. Verifique se ele est√° no mesmo diret√≥rio.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar e pr√©-processar os dados: {e}")
        return None

# Carrega os dados usando o caminho do arquivo
df = load_and_preprocess_data(FILE_PATH)

# -----------------------------------------------------------
# C√ÅLCULOS DE CLASSIFICA√á√ÉO PARA USO NOS KPIS
# -----------------------------------------------------------
if df is not None and not df.empty:
    def classificar_condicao(temp, umid):
        if temp < 25 and umid < 70:
            return "Adequado"
        else:
            return "Inadequado"

    df['condicao_armazenamento'] = df.apply(lambda row: classificar_condicao(row['temperatura'], row['umidade']), axis=1)
    
    # C√°lculo da contagem e porcentagem inadequada
    contagem_condicoes = df['condicao_armazenamento'].value_counts()
    total_pontos = len(df)
    inadequado_count = contagem_condicoes.get('Inadequado', 0)
    
    # Preven√ß√£o de divis√£o por zero
    perc_inadequado = (inadequado_count / total_pontos) * 100 if total_pontos > 0 else 0
    
    # Pega o √∫ltimo registro para KPI atual
    ultima_temp = df['temperatura'].iloc[-1]
    ultima_umid = df['umidade'].iloc[-1]
    
# -----------------------------------------------------------


# -----------------------------------------------------------
# KPIS VISUAIS NO TOPO
# -----------------------------------------------------------
if df is not None and not df.empty:
    st.header("Indicadores Chave de Desempenho (KPIs) üìà")
    
    col_kpi1, col_kpi2, col_kpi3 = st.columns(3)
    
    # Define a cor do delta para o KPI 3
    delta_color_kpi3 = "inverse" if perc_inadequado > 10 else "normal"
    
    # KPI 1: √öltima Temperatura (Cor azul para temperatura)
    col_kpi1.metric(
        label="Temperatura Atual (¬∞C) üå°Ô∏è",
        value=f"{ultima_temp:.1f}",
        delta=f"{df['temperatura'].mean():.1f} M√©dia", # Mostrar a m√©dia como refer√™ncia
        delta_color="off" 
    )
    
    # KPI 2: √öltima Umidade (Cor verde para umidade)
    col_kpi2.metric(
        label="Umidade Atual (%) üíß",
        value=f"{ultima_umid:.1f}",
        delta=f"{df['umidade'].mean():.1f} M√©dia",
        delta_color="off" 
    )
    
    # KPI 3: Porcentagem de Tempo Inadequado (Cor vermelha/verde para alerta)
    col_kpi3.metric(
        label="% Tempo Inadequado (Total) ‚ö†Ô∏è",
        value=f"{perc_inadequado:.1f} %",
        # O delta indica quantos pontos est√£o inadequados
        delta=f"{inadequado_count} Pontos", 
        delta_color=delta_color_kpi3
    )
    
# -----------------------------------------------------------

if df is not None and not df.empty:
    st.header("1. Carregamento e Tratamento dos Dados")
    st.write("Dados carregados com sucesso. Primeiras 5 linhas:")
    st.dataframe(df.head())
    

    # --- Se√ß√£o de Visualiza√ß√£o Inicial ---
    st.header("2. Visualiza√ß√£o Hist√≥rica (S√©rie Temporal) üìä")
    st.markdown("Veja como a temperatura (em azul) e a umidade (em verde) variaram ao longo do tempo. Use o zoom no gr√°fico interativo abaixo.")
    
    # Configurando cores para o line_chart do Streamlit
    st.line_chart(
        df, 
        x="data", 
        y=["temperatura", "umidade"],
        color=["#4A90E2", "#7ED321"] # Azul para Temp, Verde para Umidade
    )

    if st.button("Gerar Gr√°fico de Linhas (Matplotlib)"):
        fig, ax = plt.subplots(figsize=(12, 5))
        ax.plot(df["data"], df["temperatura"], label="Temperatura (¬∞C)", color="#4A90E2")
        ax.plot(df["data"], df["umidade"], label="Umidade (%)", color="#7ED321")
        ax.legend()
        ax.set_title("Dados de Temperatura e Umidade no Estoque (Matplotlib)", fontsize=16)
        ax.set_xlabel("Data")
        ax.set_ylabel("Valor")
        ax.grid(True, linestyle='--', alpha=0.7)
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)

    # --- Se√ß√£o de Previs√£o de Temperatura (An√°lise Preditiva) ---
    st.header("3. Previs√£o de Temperatura (Machine Learning) üß†")
    st.markdown("Um modelo de regress√£o linear (simples) prev√™ a tend√™ncia da temperatura com base no tempo.")

    # Cria uma coluna 'hora' como √≠ndice num√©rico para o tempo
    df["hora"] = np.arange(len(df))

    X = df[["hora"]]
    y = df["temperatura"]

    # Dividir dados em treino e teste (mantendo a ordem temporal com shuffle=False)
    if len(df) > 10:
        test_size = max(0.2, 5 / len(df)) # Garante que o test_size seja pelo menos 5 amostras, ou 20%
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, shuffle=False)

        model = LinearRegression()
        model.fit(X_train, y_train)

        preds = model.predict(X_test)
        
        # C√°lculo e exibi√ß√£o do RMSE
        rmse = np.sqrt(mean_squared_error(y_test, preds))
        st.info(f"Qualidade do Modelo (RMSE): **{rmse:.4f} ¬∞C**. Quanto mais pr√≥ximo de zero, melhor a previs√£o.")

        fig_pred, ax_pred = plt.subplots(figsize=(12, 5))
        # Plotar a temperatura real
        ax_pred.plot(df["data"], y, label="Temperatura Real", color="#4A90E2")
        
        # Plotar a previs√£o apenas para o per√≠odo de teste
        ax_pred.plot(df["data"].iloc[len(X_train):], preds, label="Previs√£o (Per√≠odo de Teste)", color="#FF5733", linestyle='--')
        
        ax_pred.legend()
        ax_pred.set_title("Previs√£o de Temperatura (Regress√£o Linear)", fontsize=16)
        ax_pred.set_xlabel("Data")
        ax_pred.set_ylabel("Temperatura (¬∞C)")
        ax_pred.grid(True, linestyle='--', alpha=0.7)
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig_pred)
    else:
        st.warning("Dados insuficientes para treino e previs√£o do modelo de regress√£o linear.")


    # --- Se√ß√£o de Classifica√ß√£o de Condi√ß√µes de Armazenamento ---
    st.header("4. Classifica√ß√£o das Condi√ß√µes de Armazenamento üå°Ô∏èüíß")
    st.markdown("""
    As condi√ß√µes cr√≠ticas s√£o definidas por:
    - <span style='color:green;'>**Adequado**</span>: Temperatura < 25 ¬∫C e Umidade < 70 %
    - <span style='color:red;'>**Inadequado**</span>: Temperatura ‚â• 25 ¬∫C ou Umidade ‚â• 70 %
    
    """, unsafe_allow_html=True)
    
    # A vari√°vel contagem_condicoes √© uma Series e ser√° usada diretamente no bar_chart.
    
    col_chart, col_table = st.columns(2)
    
    with col_chart:
        st.subheader("Distribui√ß√£o de Condi√ß√µes (Contagem de Pontos)")
        
        # Cria um DataFrame tempor√°rio para usar cores espec√≠ficas no gr√°fico
        contagem_df = contagem_condicoes.to_frame(name='Contagem')
        contagem_df.index.name = 'Condi√ß√£o'
        contagem_df = contagem_df.reset_index()
        
        # Define as cores (CORRE√á√ÉO APLICADA AQUI!)
        contagem_df['Cor'] = contagem_df['Condi√ß√£o'].map({'Adequado': '#7ED321', 'Inadequado': '#FF5733'})
        
        st.bar_chart(
            contagem_df, 
            x='Condi√ß√£o', 
            y='Contagem', 
            color='Cor' # Usa a coluna 'Cor' para colorir as barras
        )
        
    with col_table:
        st.subheader("Detalhe da Tabela")
        st.dataframe(df[['data', 'temperatura', 'umidade', 'condicao_armazenamento']].tail())


    # --- Se√ß√£o de Detec√ß√£o de Anomalias ---
    st.header("5. Detec√ß√£o de Anomalias (Boxplot) üì¶")

    st.markdown("""
    Os boxplots s√£o usados para identificar valores at√≠picos (anomalias), que s√£o pontos
    que caem fora de 1.5 vezes o intervalo interquartil (IQR).
    """)

    # Usando colunas para o layout responsivo
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Anomalias de Temperatura")
        fig_temp_boxplot, ax_temp_boxplot = plt.subplots(figsize=(8, 6))
        # Define um estilo de boxplot mais agrad√°vel e vertical
        ax_temp_boxplot.boxplot(df['temperatura'], vert=True, patch_artist=True, boxprops=dict(facecolor='#4A90E2', color='darkblue'), medianprops=dict(color='red'))
        ax_temp_boxplot.set_title('Boxplot da Temperatura', fontsize=14)
        ax_temp_boxplot.set_ylabel('Temperatura (¬∞C)')
        ax_temp_boxplot.set_xticklabels(['Temperatura']) # R√≥tulo fixo no eixo x
        ax_temp_boxplot.grid(True, linestyle='--', alpha=0.6, axis='y')
        st.pyplot(fig_temp_boxplot)

    with col2:
        st.subheader("Anomalias de Umidade")
        fig_umid_boxplot, ax_umid_boxplot = plt.subplots(figsize=(8, 6))
        # Define um estilo de boxplot mais agrad√°vel e vertical
        ax_umid_boxplot.boxplot(df['umidade'], vert=True, patch_artist=True, boxprops=dict(facecolor='#7ED321', color='darkgreen'), medianprops=dict(color='red'))
        ax_umid_boxplot.set_title('Boxplot da Umidade', fontsize=14)
        ax_umid_boxplot.set_ylabel('Umidade (%)')
        ax_umid_boxplot.set_xticklabels(['Umidade']) # R√≥tulo fixo no eixo x
        ax_umid_boxplot.grid(True, linestyle='--', alpha=0.6, axis='y')
        st.pyplot(fig_umid_boxplot)

    # --- Se√ß√£o de Conclus√£o e Insights ---
    st.header("6. Conclus√£o da An√°lise ‚ú®")
    st.markdown("""
    - O uso de um **termo-higr√¥metro** fornece dados essenciais para o monitoramento de estoque.
    - T√©cnicas de **machine learning**, como regress√£o linear, permitem prever tend√™ncias de condi√ß√µes futuras.
    - A **classifica√ß√£o de dados** ajuda a identificar rapidamente per√≠odos de risco para o armazenamento de produtos.
    - A an√°lise de **anomalias** por meio de boxplots pode revelar falhas em equipamentos ou condi√ß√µes ambientais extremas.
    - Se a contagem de per√≠odos "Inadequado" for alta, a **compra de um ar condicionado** ou melhorias na ventila√ß√£o podem ser justificadas para manter a qualidade dos produtos.
    """)


